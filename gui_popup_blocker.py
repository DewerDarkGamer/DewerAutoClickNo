#!/usr/bin/env python3
"""
GUI Popup Blocker - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Popup ‡∏û‡∏£‡πâ‡∏≠‡∏° GUI
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
import sys
import os
from datetime import datetime

# Import our existing modules
from config import Config
from logger import Logger

# Only import Windows-specific modules when on Windows
try:
    import ctypes
    from popup_blocker import PopupBlocker
    WINDOWS_AVAILABLE = True
except (ImportError, AttributeError):
    WINDOWS_AVAILABLE = False

class MouseMover:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"""
    
    def __init__(self):
        self.running = False
        self.thread = None
        
    def start(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå"""
        if not WINDOWS_AVAILABLE:
            return False
            
        self.running = True
        self.thread = threading.Thread(target=self._move_mouse_loop, daemon=True)
        self.thread.start()
        return True
        
    def stop(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå"""
        self.running = False
        if self.thread:
            self.thread.join(timeout=1)
            
    def _move_mouse_loop(self):
        """‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ"""
        try:
            while self.running:
                # ‡∏£‡∏≠ 1 ‡∏ô‡∏≤‡∏ó‡∏µ (60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
                for i in range(60):
                    if not self.running:
                        return
                    time.sleep(1)
                
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                self._nudge_mouse()
                
        except Exception as e:
            print(f"Error in mouse mover: {e}")
    
    def _nudge_mouse(self):
        """‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠"""
        try:
            if WINDOWS_AVAILABLE:
                # ‡πÑ‡∏î‡πâ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                point = ctypes.wintypes.POINT()
                ctypes.windll.user32.GetCursorPos(ctypes.byref(point))
                
                # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå 1 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                ctypes.windll.user32.SetCursorPos(point.x + 1, point.y)
                time.sleep(0.1)
                ctypes.windll.user32.SetCursorPos(point.x, point.y)
                
        except Exception as e:
            print(f"Error nudging mouse: {e}")

class PopupBlockerGUI:
    """GUI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Popup Blocker"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Popup Blocker - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Popup ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        self.root.geometry("500x400")
        self.root.resizable(True, True)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        self.is_running = False
        self.blocker = None
        self.blocker_thread = None
        self.mouse_mover = MouseMover()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI
        self.setup_gui()
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def setup_gui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á GUI components"""
        
        # ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
        title_frame = ttk.Frame(self.root, padding="10")
        title_frame.pack(fill=tk.X)
        
        title_label = ttk.Label(title_frame, text="üö´ Popup Blocker", font=("Arial", 16, "bold"))
        title_label.pack()
        
        subtitle_label = ttk.Label(title_frame, text="‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡πÑ‡∏°‡πà' ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ + ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠")
        subtitle_label.pack()
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°
        control_frame = ttk.LabelFrame(self.root, text="‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", padding="10")
        control_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°/‡∏´‡∏¢‡∏∏‡∏î
        button_frame = ttk.Frame(control_frame)
        button_frame.pack(fill=tk.X)
        
        self.start_button = ttk.Button(button_frame, text="‚ñ∂Ô∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", 
                                      command=self.start_blocker, style="Green.TButton")
        self.start_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", 
                                     command=self.stop_blocker, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        self.status_var = tk.StringVar(value="‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        status_label = ttk.Label(control_frame, textvariable=self.status_var, 
                                font=("Arial", 10, "bold"))
        status_label.pack(pady=5)
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        settings_frame = ttk.LabelFrame(self.root, text="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", padding="10")
        settings_frame.pack(fill=tk.X, padx=10, pady=5)
        
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ö‡πá‡∏≠‡∏Å‡∏ã‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        self.prevent_lock_var = tk.BooleanVar(value=True)
        prevent_lock_cb = ttk.Checkbutton(settings_frame, 
                                         text="‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏°‡∏≤‡∏™‡πå‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ)",
                                         variable=self.prevent_lock_var)
        prevent_lock_cb.pack(anchor=tk.W)
        
        # ‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats_frame = ttk.LabelFrame(self.root, text="‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", padding="10")
        stats_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.stats_text = ttk.Label(stats_frame, text="‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
        self.stats_text.pack()
        
        # ‡∏Å‡∏£‡∏≠‡∏ö Log
        log_frame = ttk.LabelFrame(self.root, text="Log ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", padding="5")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, width=60)
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏•‡πâ‡∏≤‡∏á Log
        clear_button = ttk.Button(log_frame, text="‡∏•‡πâ‡∏≤‡∏á Log", command=self.clear_log)
        clear_button.pack(pady=2)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        self.add_log("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Popup Blocker ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        self.add_log("‚ú® ‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≥‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏° '‡πÑ‡∏°‡πà' ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ")
        if not WINDOWS_AVAILABLE:
            self.add_log("‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô Windows - ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
            self.start_button.config(state=tk.DISABLED)
        else:
            self.add_log("üéØ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô")
        
    def add_log(self, message):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô log"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}\n"
        
        self.log_text.insert(tk.END, log_entry)
        self.log_text.see(tk.END)  # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
    def clear_log(self):
        """‡∏•‡πâ‡∏≤‡∏á log"""
        self.log_text.delete(1.0, tk.END)
        self.add_log("‡∏•‡πâ‡∏≤‡∏á log ‡πÅ‡∏•‡πâ‡∏ß")
        
    def start_blocker(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Popup Blocker"""
        if not WINDOWS_AVAILABLE:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏ô Windows ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
            return
            
        if self.is_running:
            return
            
        try:
            # ‡πÄ‡∏£‡∏¥‡πà‡∏° Popup Blocker
            self.blocker = PopupBlocker()
            self.blocker_thread = threading.Thread(target=self._run_blocker, daemon=True)
            self.blocker_thread.start()
            
            # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
            if self.prevent_lock_var.get():
                if self.mouse_mover.start():
                    self.add_log("‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß")
                else:
                    self.add_log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÑ‡∏î‡πâ")
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            self.is_running = True
            self.status_var.set("üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô...")
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
            
            self.add_log("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Popup Blocker ‡πÅ‡∏•‡πâ‡∏ß (‡∏£‡∏∏‡πà‡∏ô‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)")
            self.add_log("üîÑ ‡∏à‡∏∞‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≥‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏∏‡πà‡∏° '‡πÑ‡∏°‡πà' ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ")
            
        except Exception as e:
            messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ: {e}")
            self.add_log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
    
    def stop_blocker(self):
        """‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Popup Blocker"""
        if not self.is_running:
            return
            
        try:
            # ‡∏´‡∏¢‡∏∏‡∏î Popup Blocker
            self.is_running = False
            if self.blocker:
                self.blocker.stop()
                
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
            self.mouse_mover.stop()
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            self.status_var.set("üî¥ ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            
            self.add_log("‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            if self.blocker:
                stats = self.blocker.stats
                self.update_stats_display(stats)
                
        except Exception as e:
            self.add_log(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°: {e}")
    
    def _run_blocker(self):
        """‡∏£‡∏±‡∏ô Popup Blocker ‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å"""
        try:
            while self.is_running and self.blocker:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö popup
                self.blocker._check_for_popups()
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                self.root.after(0, self.update_stats_display, self.blocker.stats.copy())
                
                # ‡∏£‡∏≠‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
                time.sleep(self.blocker.config.check_interval)
                
        except Exception as e:
            self.root.after(0, self.add_log, f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô: {e}")
    
    def update_stats_display(self, stats):
        """‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        stats_text = f"Popup ‡∏ó‡∏µ‡πà‡∏û‡∏ö: {stats['popups_detected']} | ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß: {stats['buttons_clicked']} | ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {stats['errors']}"
        self.stats_text.config(text=stats_text)
    
    def on_closing(self):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
        if self.is_running:
            self.stop_blocker()
        
        # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏£‡∏î‡∏à‡∏ö
        if self.blocker_thread and self.blocker_thread.is_alive():
            self.blocker_thread.join(timeout=2)
            
        self.root.destroy()
    
    def run(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô GUI"""
        self.root.mainloop()

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á GUI ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô
        app = PopupBlockerGUI()
        app.run()
        
    except Exception as e:
        print(f"‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô GUI: {e}")
        
        # ‡∏ñ‡πâ‡∏≤ GUI ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö console
        if WINDOWS_AVAILABLE:
            from popup_blocker import main as console_main
            print("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ console mode...")
            console_main()
        else:
            print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏î‡πâ - ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Windows")

if __name__ == "__main__":
    main()
